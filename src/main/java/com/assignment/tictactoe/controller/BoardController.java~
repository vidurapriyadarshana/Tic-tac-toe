package com.assignment.tictactoe.controller;

import com.assignment.tictactoe.service.*;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.DialogEvent;
import javafx.scene.layout.GridPane;

public class BoardController implements BoardUi {


    private BoardImpl board;
    private AiPlayer ai;
    private HumanPlayer human;

    @FXML
    private GridPane MainGrid;

    public BoardController() {
        board = new BoardImpl();
        ai = new AiPlayer(board);
        human = new HumanPlayer(board);
    }

    @FXML
    void handleButtonAction(ActionEvent event) {
        Button button = (Button) event.getSource();
        int row = Integer.parseInt(button.getId().substring(2, 3)); // Extract row index
        int col = Integer.parseInt(button.getId().substring(3, 4)); // Extract column index

        human.move(row, col); // Human makes a move
        updateUi(); // Update the UI after the move

        if (board.checkWinner() != null) {
            NotifyWinner(board.checkWinner().getWinningPiece()); // Notify if there's a winner
        } else if (board.isBoardFull()) {
            showAlert("Tie"); // Show tie message if the board is full
        } else {
            ai.findBestMove(); // AI makes a move
            updateUi(); // Update UI after AI move
            if (board.checkWinner() != null) {
                NotifyWinner(board.checkWinner().getWinningPiece()); // Notify if AI wins
            } else if (board.isBoardFull()) {
                showAlert("Tie"); // Check again for a tie
            }
        }
    }

    // Method to update the UI buttons based on the current board state
    public void updateUi() {
        for (int row = 0; row < board.getPieces().length; row++) {
            for (int col = 0; col < board.getPieces()[row].length; col++) {
                update(row, col, board.getPieces()[row][col]);
            }
        }
    }

    // Update individual buttons based on the board's state (X, O, or empty)
    @Override
    public void update(int row, int col, Piece piece) {
        String buttonId = "#bt" + row + col; // Button ID pattern (e.g., #bt00, #bt01, etc.)
        Button button = (Button) MainGrid.lookup(buttonId); // Lookup button directly by its ID
        if (button != null) { // Ensure the button exists before updating
            if (piece == Piece.X) {
                button.setText("X");
            } else if (piece == Piece.O) {
                button.setText("O");
            } else {
                button.setText(""); // Clear text if the cell is empty
            }
        }
    }

    // Notify the winner (X or O)
    @Override
    public void NotifyWinner(Piece winner) {
        if (winner == Piece.X) {
            showAlert("X wins");
        } else if (winner == Piece.O) {
            showAlert("O wins");
        }
    }

    // Show an alert message and reset the board after closing the dialog
    private void showAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION, message);
        alert.setOnCloseRequest(event -> {
            board.initializeBoard(); // Reset the board
            updateUi(); // Update the UI to reflect the reset
        });
        alert.showAndWait(); // Wait for the user to close the alert
    }
}